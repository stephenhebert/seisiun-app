generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Database {
  id           Int            @id @default(autoincrement())
  name         String
  databaseTune DatabaseTune[]
}

model Session {
  id              Int           @id @default(autoincrement())
  name            String
  // location
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  createdBy Int
  members    UserSession[]
  createdByUser       User          @relation(fields: [createdBy], references: [id])
  sessionLogs     SessionLog[]
}

model TuneComment {
  id        Int      @id @default(autoincrement())
  tuneId    Int
  userId    Int
  comment   String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  hasABC    Int
  tune      Tune     @relation(fields: [tuneId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model TuneName {
  id     Int    @id @default(autoincrement())
  tuneId Int
  name   String
  tune   Tune   @relation(fields: [tuneId], references: [id])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  tuneTags TuneTag[]
}

model TuneTag {
  tuneId Int
  tagId  Int
  tune   Tune @relation(fields: [tuneId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id(name: "id", [tuneId, tagId])
}

model Tune {
  id            Int            @id @default(autoincrement())
  tuneComments  TuneComment[]
  tuneNames     TuneName[]
  tuneTags      TuneTag[]
  databaseTunes DatabaseTune[]
  userTunes     UserTune[]
  sessionLogTunes   SessionLogTune[]
}

model DatabaseTune {
  databaseId     Int
  databaseTuneId Int
  tuneId         Int
  url            String?
  database       Database @relation(fields: [databaseId], references: [id])
  tune           Tune     @relation(fields: [tuneId], references: [id])

  @@id(name: "id", [databaseId, databaseTuneId])
}

model UserSession {
  sessionId Int
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  session   Session  @relation(fields: [sessionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id(name: "id", [sessionId, userId])
}

model UserTune {
  userId     Int
  tuneId     Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  isFavorite Boolean
  status     Int
  user       User     @relation(fields: [userId], references: [id])
  tune       Tune     @relation(fields: [tuneId], references: [id])

  @@id(name: "id", [userId, tuneId])
}

model User {
  id           Int           @id @default(autoincrement())
  clerkId      String        @unique
  name         String
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  tuneComments TuneComment[]
  userSessions  UserSession[]
  userTunes    UserTune[]
  createdSessions      Session[]
  followedBy   UserFollow[] @relation("Followed")
  following    UserFollow[] @relation("Follower")
  userSessionLogs SessionLog[]
}

model UserFollow {
  followerId Int
  followedId Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  follower   User     @relation("Follower", fields: [followerId], references: [id])
  followed   User     @relation("Followed", fields: [followedId], references: [id])
  @@id(name: "id", [followerId, followedId])
}

model SessionLog {
  id        Int      @id @default(autoincrement())
  sessionId Int
  createdBy Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  sessionDate DateTime @db.Date
  session   Session  @relation(fields: [sessionId], references: [id])
  createdByUser       User          @relation(fields: [createdBy], references: [id])
  sessionLogTunes SessionLogTune[]
}

model SessionLogTune {
  tuneId       Int
  sessionLogId Int
  order        Int
  tune         Tune       @relation(fields: [tuneId], references: [id])
  sessionLog   SessionLog @relation(fields: [sessionLogId], references: [id])

  @@id(name: "id", [tuneId, sessionLogId])
}